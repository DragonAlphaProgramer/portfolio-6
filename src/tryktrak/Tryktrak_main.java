/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tryktrak;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author Patryk
 */
public class Tryktrak_main extends javax.swing.JFrame {

    int[] ruchy = new int[2];
    int ilosc_ruchow = 0;
    BufferedImage k1, k2, k3, k4, k5, k6;
    Graphics g1;
    Graphics g2;
    Graphics g3;
    Gracz gracz1;
    Gracz gracz2;
    int posuniecie = 0;
    boolean kto_ma_ruch = true;
    boolean kontrola = false;
    private int punkty_wygranej;

    /**
     * Creates new form Tryktrak_main
     *
     * @throws java.io.IOException
     */
    public Tryktrak_main() throws IOException {
        k1 = ImageIO.read(getClass().getResource("k1.jpg"));
        k2 = ImageIO.read(getClass().getResource("k2.jpg"));
        k3 = ImageIO.read(getClass().getResource("k3.jpg"));
        k4 = ImageIO.read(getClass().getResource("k4.jpg"));
        k5 = ImageIO.read(getClass().getResource("k5.jpg"));
        k6 = ImageIO.read(getClass().getResource("k6.jpg"));
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        PanelDom = new javax.swing.JPanel();
        panel2 = new javax.swing.JPanel();
        panel_banda = new javax.swing.JPanel();
        jButton25 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jProgressBar2 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tryktrak");

        jButton1.setText("1");
        jButton1.setActionCommand("");
        jButton1.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton1.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton1.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("2");
        jButton2.setToolTipText("");
        jButton2.setActionCommand("");
        jButton2.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton2.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton2.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("3");
        jButton3.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton3.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton3.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("4");
        jButton4.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton4.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton4.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("5");
        jButton5.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton5.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton5.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("6");
        jButton6.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton6.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton6.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("7");
        jButton7.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton7.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton7.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("8");
        jButton8.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton8.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton8.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("9");
        jButton9.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton9.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton9.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("10");
        jButton10.setActionCommand("");
        jButton10.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton10.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton10.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("11");
        jButton11.setActionCommand("");
        jButton11.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton11.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton11.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("12");
        jButton12.setActionCommand("");
        jButton12.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton12.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton12.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setText("13");
        jButton13.setActionCommand("");
        jButton13.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton13.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton13.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setText("14");
        jButton14.setActionCommand("");
        jButton14.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton14.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton14.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("15");
        jButton15.setActionCommand("");
        jButton15.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton15.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton15.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setText("16");
        jButton16.setActionCommand("");
        jButton16.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton16.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton16.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("17");
        jButton17.setToolTipText("");
        jButton17.setActionCommand("");
        jButton17.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton17.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton17.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setText("18");
        jButton18.setActionCommand("");
        jButton18.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton18.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton18.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setText("19");
        jButton19.setActionCommand("");
        jButton19.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton19.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton19.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jButton20.setText("20");
        jButton20.setActionCommand("");
        jButton20.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton20.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton20.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        jButton21.setText("21");
        jButton21.setActionCommand("");
        jButton21.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton21.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton21.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        jButton22.setText("22");
        jButton22.setActionCommand("");
        jButton22.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton22.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton22.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jButton23.setText("23");
        jButton23.setActionCommand("");
        jButton23.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton23.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton23.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jButton24.setText("24");
        jButton24.setActionCommand("");
        jButton24.setMaximumSize(new java.awt.Dimension(50, 32));
        jButton24.setMinimumSize(new java.awt.Dimension(50, 32));
        jButton24.setPreferredSize(new java.awt.Dimension(50, 32));
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelDomLayout = new javax.swing.GroupLayout(PanelDom);
        PanelDom.setLayout(PanelDomLayout);
        PanelDomLayout.setHorizontalGroup(
            PanelDomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 330, Short.MAX_VALUE)
        );
        PanelDomLayout.setVerticalGroup(
            PanelDomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 324, Short.MAX_VALUE)
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panel_bandaLayout = new javax.swing.GroupLayout(panel_banda);
        panel_banda.setLayout(panel_bandaLayout);
        panel_bandaLayout.setHorizontalGroup(
            panel_bandaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel_bandaLayout.setVerticalGroup(
            panel_bandaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jButton25.setText("nowa gra");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        jProgressBar1.setBackground(new java.awt.Color(255, 255, 255));
        jProgressBar1.setForeground(new java.awt.Color(255, 255, 255));
        jProgressBar1.setMaximum(15);
        jProgressBar1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jProgressBar2.setBackground(new java.awt.Color(0, 0, 0));
        jProgressBar2.setForeground(new java.awt.Color(0, 0, 0));
        jProgressBar2.setMaximum(15);
        jProgressBar2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Wyprowadzone piony G1");

        jLabel2.setText("Wyprowadzone piony G2");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Użyj 1 kostki");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("użyj 2 kostki");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 132, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 131, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );

        jLabel3.setText("Punkty gracza 1");

        jLabel4.setText("Punkty gracza 2");

        jLabel5.setText("do zwycięstwa");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(138, 138, 138))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(panel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panel_banda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PanelDom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jButton25, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jProgressBar2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3))
                                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PanelDom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panel_banda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton25)
                            .addComponent(jLabel5))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(1, 1, 1)
                        .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jRadioButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 207, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 1 : 23 - 1);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 2 : 23 - 2);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 3 : 23 - 3);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 4 : 23 - 4);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 5 : 23 - 5);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 6 : 23 - 6);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 7 : 23 - 7);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 8 : 23 - 8);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 9 : 23 - 9);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 10 : 13 - 10);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 11 : 23 - 11);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 12 : 23 - 12);
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 13 : 23 - 13);
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 15 : 23 - 15);
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 16 : 23 - 16);
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 17 : 23 - 17);
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 18 : 23 - 18);
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 19 : 23 - 19);
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 20 : 23 - 20);
    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 21 : 23 - 21);
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 22 : 23 - 22);
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 23 : 23 - 23);
    }//GEN-LAST:event_jButton24ActionPerformed

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        try {
            punkty_wygranej = Integer.parseInt(JOptionPane.showInputDialog("Podaj wymaganą ilość punktów do wygrania"));
            jLabel5.setText("Do zwycięstwa: " + String.valueOf(punkty_wygranej));
            gracz1 = new Gracz(true);
            gracz2 = new Gracz(false);
            jLabel3.setText("punkty gracza 1: " + gracz1.getPunkty());
            jLabel4.setText("punkty gracza 2: " + gracz2.getPunkty());
            czysc();
            rysuj_plansze();
            rysuj_piony();
            nowa_tura();
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "Błąd inicjacji rozgrywki. /n"
                    + "Podana wartość musi być liczbą");
        }
    }//GEN-LAST:event_jButton25ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        posuniecie = ruchy[0];
        ustaw(posuniecie);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 0 : 23 - 0);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        wykonaj_ruch(kto_ma_ruch == true ? 14 : 23 - 14);
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        posuniecie = ruchy[1];
        ustaw(posuniecie);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tryktrak_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Tryktrak_main().setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(Tryktrak_main.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelDom;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JPanel panel2;
    private javax.swing.JPanel panel_banda;
    // End of variables declaration//GEN-END:variables

    private void rysuj_plansze() {

        g1 = panel_banda.getGraphics();
        g1.setColor(Color.GREEN);
        g1.fillRect(0, 0, panel_banda.getWidth(), panel_banda.getHeight());
        g1.setColor(Color.black);
        g1.drawLine(panel_banda.getWidth() / 3, 0, panel_banda.getWidth() / 3, panel_banda.getHeight());
        g1.drawLine(panel_banda.getWidth() / 3 * 2, 0, panel_banda.getWidth() / 3 * 2, panel_banda.getHeight());
        g2 = PanelDom.getGraphics();
        g2.setColor(Color.GREEN);
        g2.fillRect(0, 0, PanelDom.getWidth(), PanelDom.getHeight());
        g2.setColor(Color.blue);
        g2.fillPolygon(new int[]{0, 25, 50}, new int[]{0, 250, 0}, 3);
        g2.fillPolygon(new int[]{50, 75, 100}, new int[]{PanelDom.getHeight(), PanelDom.getHeight() - 250, PanelDom.getHeight()}, 3);
        g2.fillPolygon(new int[]{100, 125, 150}, new int[]{0, 250, 0}, 3);
        g2.fillPolygon(new int[]{150, 175, 200}, new int[]{PanelDom.getHeight(), PanelDom.getHeight() - 250, PanelDom.getHeight()}, 3);
        g2.fillPolygon(new int[]{200, 225, 250}, new int[]{0, 250, 0}, 3);
        g2.fillPolygon(new int[]{250, 275, 300}, new int[]{PanelDom.getHeight(), PanelDom.getHeight() - 250, PanelDom.getHeight()}, 3);
        g2.setColor(Color.YELLOW);
        g2.fillPolygon(new int[]{0, 25, 50}, new int[]{PanelDom.getHeight(), PanelDom.getHeight() - 250, PanelDom.getHeight()}, 3);
        g2.fillPolygon(new int[]{50, 75, 100}, new int[]{0, 250, 0}, 3);
        g2.fillPolygon(new int[]{100, 125, 150}, new int[]{PanelDom.getHeight(), PanelDom.getHeight() - 250, PanelDom.getHeight()}, 3);
        g2.fillPolygon(new int[]{150, 175, 200}, new int[]{0, 250, 0}, 3);
        g2.fillPolygon(new int[]{200, 225, 250}, new int[]{PanelDom.getHeight(), PanelDom.getHeight() - 250, PanelDom.getHeight()}, 3);
        g2.fillPolygon(new int[]{250, 275, 300}, new int[]{0, 250, 0}, 3);
        g3 = panel2.getGraphics();
        g3.setColor(Color.GREEN);

        g3.fillRect(0, 0, panel2.getWidth(), panel2.getHeight());
        g3.setColor(Color.blue);
        g3.fillPolygon(new int[]{0, 25, 50}, new int[]{0, 250, 0}, 3);
        g3.fillPolygon(new int[]{50, 75, 100}, new int[]{PanelDom.getHeight(), PanelDom.getHeight() - 250, PanelDom.getHeight()}, 3);
        g3.fillPolygon(new int[]{100, 125, 150}, new int[]{0, 250, 0}, 3);
        g3.fillPolygon(new int[]{150, 175, 200}, new int[]{PanelDom.getHeight(), PanelDom.getHeight() - 250, PanelDom.getHeight()}, 3);
        g3.fillPolygon(new int[]{200, 225, 250}, new int[]{0, 250, 0}, 3);
        g3.fillPolygon(new int[]{250, 275, 300}, new int[]{PanelDom.getHeight(), PanelDom.getHeight() - 250, PanelDom.getHeight()}, 3);
        g3.setColor(Color.yellow);
        g3.fillPolygon(new int[]{0, 25, 50}, new int[]{PanelDom.getHeight(), PanelDom.getHeight() - 250, PanelDom.getHeight()}, 3);
        g3.fillPolygon(new int[]{50, 75, 100}, new int[]{0, 250, 0}, 3);
        g3.fillPolygon(new int[]{100, 125, 150}, new int[]{PanelDom.getHeight(), PanelDom.getHeight() - 250, PanelDom.getHeight()}, 3);
        g3.fillPolygon(new int[]{150, 175, 200}, new int[]{0, 250, 0}, 3);
        g3.fillPolygon(new int[]{200, 225, 250}, new int[]{PanelDom.getHeight(), PanelDom.getHeight() - 250, PanelDom.getHeight()}, 3);
        g3.fillPolygon(new int[]{250, 275, 300}, new int[]{0, 250, 0}, 3);

    }

    private void rysuj_piony() {
        for (int i = 0; i < 24; i++) {
            switch (i) {
                case 0:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        g.setColor(Color.WHITE);
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(250, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 250, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(250, 0 + (j - 1) * 50, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 250, 0);
                                break;
                            }
                        }
                    }
                    break;
                case 1:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(200, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 200, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(200, 0 + (j - 1) * 50, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 200, 0);
                                break;
                            }
                        }
                    }
                    break;
                case 2:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(150, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 150, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(150, 0 + (j - 1) * 50, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 150, 0);
                                break;
                            }
                        }
                    }
                    break;
                case 3:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(100, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 100, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.BLACK);
                        g.
                                setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(100, 0 + (j - 1) * 50, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 100, 0);
                                break;
                            }
                        }
                    }
                    break;
                case 4:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(50, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 50, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(50, 0 + (j - 1) * 50, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 50, 0);
                                break;
                            }
                        }
                    }
                    break;
                case 5:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(0, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 0, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(0, 0 + (j - 1) * 50, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 0, 0);
                                break;
                            }
                        }
                    }
                    break;
                case 6:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        g.setColor(Color.WHITE);
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(250, panel2.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 250, panel2.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(250, 0 + (j - 1) * 50, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 250, 0);
                                break;
                            }
                        }
                    }
                    break;
                case 7:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        g.setColor(Color.WHITE);
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(200, panel2.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 200, panel2.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(200, 0 + (j - 1) * 50, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 200, 0);
                                break;
                            }
                        }
                    }
                    break;
                case 8:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        g.setColor(Color.WHITE);
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(150, panel2.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 150, panel2.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(150, 0 + (j - 1) * 50, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 150, 0);
                                break;
                            }
                        }
                    }
                    break;
                case 9:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        g.setColor(Color.WHITE);
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(100, panel2.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 100, panel2.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(100, 0 + (j - 1) * 50, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 100, 0);
                                break;
                            }
                        }
                    }
                    break;
                case 10:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        g.setColor(Color.WHITE);
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(50, panel2.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 50, panel2.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(50, 0 + (j - 1) * 50, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 50, 0);
                                break;
                            }
                        }
                    }
                    break;
                case 11:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        g.setColor(Color.WHITE);
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(0, panel2.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 0, panel2.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(0, 0 + (j - 1) * 50, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 0, 0);
                                break;
                            }
                        }
                    }
                    break;
                case 12:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(0, 0 + 50 * (j - 1), 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 0, 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(0, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 0, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    break;
                case 13:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(50, 0 + 50 * (j - 1), 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 50, 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(50, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 50, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    break;
                case 14:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(100, 0 + 50 * (j - 1), 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 100, 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(100, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 100, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    break;
                case 15:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(150, 0 + 50 * (j - 1), 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 150, 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(150, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 150, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    break;
                case 16:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(200, 0 + 50 * (j - 1), 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 200, 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(200, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 200, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    break;
                case 17:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(250, 0 + 50 * (j - 1), 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 250, 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (panel2.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(250, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 250, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    break;
                case 18:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(0, 0 + 50 * (j - 1), 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 0, 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(0, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 0, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    break;
                case 19:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(50, 0 + 50 * (j - 1), 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 50, 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(50, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 50, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    break;
                case 20:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(100, 0 + 50 * (j - 1), 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 100, 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(100, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 100, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    break;
                case 21:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(150, 0 + 50 * (j - 1), 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 150, 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(150, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 150, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    break;
                case 22:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(200, 0 + 50 * (j - 1), 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 200, 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(200, PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 200, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    break;
                case 23:
                    if (gracz1.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.WHITE);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz1.getPozycje()[i]; j++) {
                            g.fillOval(250, 0 + 50 * (j - 1), 50, 50);
                            if (j == 5 && gracz1.getPozycje()[i] > 5) {
                                g.setColor(Color.black);
                                g.drawString("5+", 250, 50);
                                break;
                            }
                        }
                    }
                    if (gracz2.getPozycje()[i] != 0) {
                        Graphics g = (PanelDom.getGraphics());
                        g.setColor(Color.BLACK);
                        g.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
                        for (int j = 1; j <= gracz2.getPozycje()[i]; j++) {
                            g.fillOval(250, 0 + PanelDom.getHeight() - 50 * j, 50, 50);
                            if (j == 5 && gracz2.getPozycje()[i] > 5) {
                                g.setColor(Color.white);
                                g.drawString("5+", 250, PanelDom.getHeight() - 50);
                                break;
                            }
                        }
                    }
                    break;
            }
        }
        if (gracz1.getBanda() != 0) {
            Graphics b = panel_banda.getGraphics();
            b.setColor(Color.WHITE);
            b.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
            for (int i = 1; i <= gracz1.getBanda(); i++) {
                b.fillOval(25, panel_banda.getHeight() - 50 * (i), 50, 50);
                if (i == 5 && gracz1.getBanda() > 5) {
                    b.setColor(Color.black);
                    b.drawString("5+", 25, panel_banda.getHeight() - 25);
                    break;
                }

            }
        }
        if (gracz2.getBanda() != 0) {
            Graphics b = panel_banda.getGraphics();
            b.setColor(Color.BLACK);
            b.setFont(new Font(Font.MONOSPACED, Font.BOLD, 50));
            for (int i = 1; i <= gracz2.getBanda(); i++) {
                b.fillOval(25, 0 + 50 * (i - 1), 50, 50);
                if (i == 5 && gracz2.getBanda() > 5) {
                    b.setColor(Color.white);
                    b.drawString("5+", 25, 50);
                    break;
                }

            }
        }
    }

    private void czysc() {
        g1 = PanelDom.getGraphics();
        g2 = panel2.getGraphics();
        g3 = panel_banda.getGraphics();
        g1.clearRect(0, 0, PanelDom.getWidth(), PanelDom.getHeight());
        g2.clearRect(0, 0, panel2.getWidth(), panel2.getHeight());
        g3.clearRect(0, 0, panel_banda.getWidth(), panel_banda.getHeight());
    }

    void nowa_tura() {

        for (int i = 0; i < 2; i++) {
            Random los = new Random();
            ruchy[i] = los.nextInt(6) + 1;

            switch (i) {
                case 0:
                    Graphics2D k = (Graphics2D) jPanel1.getGraphics();
                    switch (ruchy[i]) {
                        case 1:
                            k.drawImage(k1, 0, 0, this);
                            break;
                        case 2:
                            k.drawImage(k2, 0, 0, this);
                            break;
                        case 3:
                            k.drawImage(k3, 0, 0, this);
                            break;
                        case 4:
                            k.drawImage(k4, 0, 0, this);
                            break;
                        case 5:
                            k.drawImage(k5, 0, 0, this);
                            break;
                        case 6:
                            k.drawImage(k6, 0, 0, this);
                            break;
                    }
                    break;
                case 1:
                    Graphics2D l = (Graphics2D) jPanel2.getGraphics();
                    switch (ruchy[i]) {
                        case 1:
                            l.drawImage(k1, 0, 0, this);
                            break;
                        case 2:
                            l.drawImage(k2, 0, 0, this);
                            break;
                        case 3:
                            l.drawImage(k3, 0, 0, this);
                            break;
                        case 4:
                            l.drawImage(k4, 0, 0, this);
                            break;
                        case 5:
                            l.drawImage(k5, 0, 0, this);
                            break;
                        case 6:
                            l.drawImage(k6, 0, 0, this);
                            break;
                    }
                    break;
            }
            jRadioButton1.setEnabled(true);
            jRadioButton2.setEnabled(true);
            buttonGroup1.clearSelection();
            if (ruchy[0] == ruchy[1]) {
                ilosc_ruchow = 4;
                posuniecie = ruchy[0];
            } else {
                ilosc_ruchow = 2;
            }

        }
        if ((kto_ma_ruch == false && gracz2.getBanda() == 0) || (kto_ma_ruch == true && gracz1.getBanda() == 0)) {
            for (int i = 0; i < 24; i++) {
                switch (i) {
                    case 0:
                        jButton1.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 1:
                        jButton2.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 2:
                        jButton3.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 3:
                        jButton4.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 4:
                        jButton5.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 5:
                        jButton6.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 6:
                        jButton7.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 7:
                        jButton8.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 8:
                        jButton9.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 9:
                        jButton10.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 10:
                        jButton11.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 11:
                        jButton12.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 12:
                        jButton13.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 13:
                        jButton14.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 14:
                        jButton15.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 15:
                        jButton16.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 16:
                        jButton17.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 17:
                        jButton18.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 18:
                        jButton19.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 19:
                        jButton20.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 20:
                        jButton21.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 21:
                        jButton22.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 22:
                        jButton23.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;
                    case 23:
                        jButton24.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - i] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[i] > 0));
                        break;

                }
            }
        } else {
            if (ilosc_ruchow != 0) {
                jButton1.setEnabled(false);
                jButton2.setEnabled(false);
                jButton3.setEnabled(false);
                jButton4.setEnabled(false);
                jButton5.setEnabled(false);
                jButton6.setEnabled(false);
                jButton7.setEnabled(false);
                jButton8.setEnabled(false);
                jButton9.setEnabled(false);
                jButton10.setEnabled(false);
                jButton11.setEnabled(false);
                jButton12.setEnabled(false);
                jButton13.setEnabled(false);
                jButton14.setEnabled(false);
                jButton15.setEnabled(false);
                jButton16.setEnabled(false);
                jButton17.setEnabled(false);
                jButton18.setEnabled(false);
                jButton19.setEnabled(false);
                jButton20.setEnabled(false);
                jButton21.setEnabled(false);
                jButton22.setEnabled(false);
                jButton23.setEnabled(false);
                jButton24.setEnabled(false);
                if (kto_ma_ruch == true) {
                    for (int x = 0; x < 2; x++) {
                        switch (ruchy[x] - 1) {
                            case 0:
                                jButton1.setEnabled(gracz2.getPozycje()[23 - (ruchy[x] - 1)] < 2);
                                break;
                            case 1:
                                jButton2.setEnabled(gracz2.getPozycje()[23 - (ruchy[x] - 1)] < 2);
                                break;
                            case 2:
                                jButton3.setEnabled(gracz2.getPozycje()[23 - (ruchy[x] - 1)] < 2);
                                break;
                            case 3:
                                jButton4.setEnabled(gracz2.getPozycje()[23 - (ruchy[x] - 1)] < 2);
                                break;
                            case 4:
                                jButton5.setEnabled(gracz2.getPozycje()[23 - (ruchy[x] - 1)] < 2);
                                break;
                            case 5:
                                jButton6.setEnabled(gracz2.getPozycje()[23 - (ruchy[x] - 1)] < 2);
                                break;
                        }
                    }
                    if (jButton6.isEnabled() == false && jButton5.isEnabled() == false
                            && jButton1.isEnabled() == false && jButton2.isEnabled() == false
                            && jButton3.isEnabled() == false && jButton4.isEnabled() == false) {
                        JOptionPane.showMessageDialog(rootPane, "Brak możliwości wyrowadzenia piona, ruch przeciwnika");
                        kto_ma_ruch = kto_ma_ruch == false;
                        nowa_tura();
                    }

                } else {
                    for (int x = 0; x < 2; x++) {
                        switch (ruchy[x] - 1) {
                            case 0:
                                jButton24.setEnabled(gracz1.getPozycje()[23 - (ruchy[x] - 1)] < 2);
                                break;
                            case 1:
                                jButton23.setEnabled(gracz1.getPozycje()[23 - (ruchy[x] - 1)] < 2);
                                break;
                            case 2:
                                jButton22.setEnabled(gracz1.getPozycje()[23 - (ruchy[x] - 1)] < 2);
                                break;
                            case 3:
                                jButton21.setEnabled(gracz1.getPozycje()[23 - (ruchy[x] - 1)] < 2);
                                break;
                            case 4:
                                jButton20.setEnabled(gracz1.getPozycje()[23 - (ruchy[x] - 1)] < 2);
                                break;
                            case 5:
                                jButton19.setEnabled(gracz1.getPozycje()[23 - (ruchy[x] - 1)] < 2);
                                break;
                        }
                    }
                    if (jButton19.isEnabled() == false && jButton20.isEnabled() == false
                            && jButton23.isEnabled() == false && jButton24.isEnabled() == false
                            && jButton22.isEnabled() == false && jButton21.isEnabled() == false) {
                        JOptionPane.showMessageDialog(rootPane, "Brak możliwości wyrowadzenia piona, ruch przeciwnika");
                        kto_ma_ruch = kto_ma_ruch == false;
                        nowa_tura();
                    }
                }
            }
        }
        czysc();
        rysuj_plansze();
        rysuj_piony();
    }

    private void wykonaj_ruch(int i) {
        if ((ilosc_ruchow > 0 && ((jRadioButton1.isSelected() == true || jRadioButton2.isSelected() == true)) || ruchy[0] == ruchy[1])) {
            if ((kto_ma_ruch == true && gracz1.getBanda() == 0) || (kto_ma_ruch == false && gracz2.getBanda() == 0)) {
                if ((kto_ma_ruch == true && ((gracz1.isPozwolenie_na_wyprowadzke() == false
                        && i + posuniecie < 24 && gracz2.getPozycje()[23 - (i + posuniecie)] < 2)
                        || ((gracz1.isPozwolenie_na_wyprowadzke() == true
                        && (i + posuniecie >= 24 || gracz2.getPozycje()[23 - (i + posuniecie)] < 2)))))
                        || (kto_ma_ruch == false && ((gracz2.isPozwolenie_na_wyprowadzke() == false
                        && i + posuniecie < 24 && gracz1.getPozycje()[23 - (i + posuniecie)] < 2)
                        || ((gracz2.isPozwolenie_na_wyprowadzke() == true
                        && (i + posuniecie >= 24 || gracz1.getPozycje()[23 - (i + posuniecie)] < 2)))))) {
                    if (kto_ma_ruch == true) {
                        if (23 - (i + posuniecie) < 24 && 23 - (i + posuniecie) > -1) {
                            if (gracz2.getPozycje()[23 - (i + posuniecie)] == 1) {
                                gracz2.bicie(23 - (i + posuniecie));
                            }
                        }
                        ilosc_ruchow--;
                        gracz1.ruszaj_sie(i, posuniecie);
                        jProgressBar1.setValue(gracz1.getWyprowadzki());
                        if (gracz1.getWyprowadzki() == 15) {
                            gracz1.dolicz_punkty(gracz2.isPozwolenie_na_wyprowadzke(), (gracz2.getBanda()
                                    + gracz2.getPozycje()[0] + gracz2.getPozycje()[1]
                                    + gracz2.getPozycje()[2] + gracz2.getPozycje()[3]
                                    + gracz2.getPozycje()[4] + gracz2.getPozycje()[5] > 0)
                            );
                            if (gracz1.getPunkty() >= punkty_wygranej) {
                                JOptionPane.showMessageDialog(rootPane, "Wygrał gracz 1");
                            } else {
                                gracz1.start_ust();
                                gracz2.start_ust();
                                kto_ma_ruch = true;
                                nowa_tura();
                            }
                        }
                    } else {
                        if (23 - (i + posuniecie) < 24 && 23 - (i + posuniecie) > -1) {
                            if (gracz1.getPozycje()[23 - (i + posuniecie)] == 1) {
                                gracz1.bicie(23 - (i + posuniecie));
                            }
                        }
                        ilosc_ruchow--;
                        gracz2.ruszaj_sie(i, posuniecie);
                        jProgressBar2.setValue(gracz2.getWyprowadzki());
                        if (gracz2.getWyprowadzki() == 15) {
                            gracz2.dolicz_punkty(gracz1.isPozwolenie_na_wyprowadzke(), (gracz1.getBanda()
                                    + gracz1.getPozycje()[0] + gracz1.getPozycje()[1]
                                    + gracz1.getPozycje()[2] + gracz1.getPozycje()[3]
                                    + gracz1.getPozycje()[4] + gracz1.getPozycje()[5] > 0)
                            );
                            if (gracz2.getPunkty() >= punkty_wygranej) {
                                JOptionPane.showMessageDialog(rootPane, "Wygrał gracz 2");
                            } else {

                                gracz1.start_ust();
                                gracz2.start_ust();
                                kto_ma_ruch = false;
                                nowa_tura();
                            }
                        }
                    }
                    jLabel3.setText("Punkty gracza 1: " + gracz1.getPunkty());
                    jLabel4.setText("Punkty gracza 2: " + gracz2.getPunkty());
                    for (int x = 0; x < 23; x++) {
                        switch (x) {
                            case 0:
                                jButton1.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 1:
                                jButton2.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 2:
                                jButton3.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 3:
                                jButton4.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 4:
                                jButton5.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 5:
                                jButton6.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 6:
                                jButton7.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 7:
                                jButton8.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 8:
                                jButton9.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 9:
                                jButton10.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 10:
                                jButton11.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 11:
                                jButton12.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 12:
                                jButton13.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 13:
                                jButton14.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 14:
                                jButton15.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 15:
                                jButton16.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 16:
                                jButton17.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 17:
                                jButton18.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 18:
                                jButton19.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 19:
                                jButton20.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 20:
                                jButton21.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 21:
                                jButton22.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 22:
                                jButton23.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                            case 23:
                                jButton24.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                break;
                        }
                    }
                    czysc();
                    rysuj_plansze();
                    rysuj_piony();
                    if (ilosc_ruchow == 0) {
                        kto_ma_ruch = kto_ma_ruch == false;
                        nowa_tura();
                    } else {
                         if (ruchy[0] != ruchy[1]) {
                            if (posuniecie==ruchy[0]) {
                                posuniecie = ruchy[1];
                                jRadioButton1.setEnabled(false);
                                jRadioButton2.setSelected(true);
                                ustaw(posuniecie);
                            } else if (posuniecie==ruchy[1]) {
                                posuniecie = ruchy[0];
                                jRadioButton2.setEnabled(false);
                                jRadioButton1.setSelected(true);
                                ustaw(posuniecie);
                            }
                        } else {
                            ustaw(posuniecie);
                        }
                    }
                } else {
                    Toolkit.getDefaultToolkit().beep();
                    System.out.println(posuniecie);

                }
            } else {
                if (kto_ma_ruch == true) {
                    if (23 - (i + posuniecie) < 24 && 23 - (i + posuniecie) > -1) {
                        if (gracz2.getPozycje()[23 - (posuniecie - 1)] == 1) {
                            gracz2.bicie(23 - (posuniecie - 1));
                        }
                    }
                    ilosc_ruchow--;
                    gracz1.wprowadz_do_gry(posuniecie - 1);
                } else {
                    if (23 - (i + posuniecie) < 24 && 23 - (i + posuniecie) > -1) {
                        if (gracz1.getPozycje()[23 - (posuniecie - 1)] == 1) {
                            gracz1.bicie(23 - (posuniecie - 1));
                        }
                    }
                    ilosc_ruchow--;
                    gracz2.wprowadz_do_gry(posuniecie - 1);
                }
                if (ilosc_ruchow == 0) {
                    kto_ma_ruch = kto_ma_ruch == false;
                    nowa_tura();
                } else {
                    if ((kto_ma_ruch == true && gracz1.getBanda() != 0) || (kto_ma_ruch == false && gracz2.getBanda() != 0)) {
                        if (ruchy[0] != ruchy[1]) {
                            if (jRadioButton1.isSelected()) {
                                jRadioButton1.setEnabled(false);
                                jRadioButton2.setSelected(true);
                                posuniecie = ruchy[1];
                                ustaw(posuniecie);
                            } else if (jRadioButton2.isSelected()) {
                                jRadioButton2.setEnabled(false);
                                jRadioButton1.setSelected(true);
                                posuniecie = ruchy[0];
                                ustaw(posuniecie);
                            }
                        } else {
                            ustaw(posuniecie);
                        }
                        jButton1.setEnabled(false);
                        jButton2.setEnabled(false);
                        jButton3.setEnabled(false);
                        jButton4.setEnabled(false);
                        jButton5.setEnabled(false);
                        jButton6.setEnabled(false);
                        jButton7.setEnabled(false);
                        jButton8.setEnabled(false);
                        jButton9.setEnabled(false);
                        jButton10.setEnabled(false);
                        jButton11.setEnabled(false);
                        jButton12.setEnabled(false);
                        jButton13.setEnabled(false);
                        jButton14.setEnabled(false);
                        jButton15.setEnabled(false);
                        jButton16.setEnabled(false);
                        jButton17.setEnabled(false);
                        jButton18.setEnabled(false);
                        jButton19.setEnabled(false);
                        jButton20.setEnabled(false);
                        jButton21.setEnabled(false);
                        jButton22.setEnabled(false);
                        jButton23.setEnabled(false);
                        jButton24.setEnabled(false);
                        if (kto_ma_ruch == true) {
                            switch (posuniecie - 1) {
                                case 0:
                                    jButton1.setEnabled(gracz2.getPozycje()[23 - (posuniecie - 1)] < 2);
                                    break;
                                case 1:
                                    jButton2.setEnabled(gracz2.getPozycje()[23 - (posuniecie - 1)] < 2);
                                    break;
                                case 2:
                                    jButton3.setEnabled(gracz2.getPozycje()[23 - (posuniecie - 1)] < 2);
                                    break;
                                case 3:
                                    jButton4.setEnabled(gracz2.getPozycje()[23 - (posuniecie - 1)] < 2);
                                    break;
                                case 4:
                                    jButton5.setEnabled(gracz2.getPozycje()[23 - (posuniecie - 1)] < 2);
                                    break;
                                case 5:
                                    jButton6.setEnabled(gracz2.getPozycje()[23 - (posuniecie - 1)] < 2);
                                    break;

                            }
                            if (jButton6.isEnabled() == false && jButton5.isEnabled() == false
                                    && jButton1.isEnabled() == false && jButton2.isEnabled() == false
                                    && jButton3.isEnabled() == false && jButton4.isEnabled() == false) {
                                JOptionPane.showMessageDialog(rootPane, "Brak możliwości wyrowadzenia piona, ruch przeciwnika");
                                nowa_tura();
                            }

                        } else {

                            switch (posuniecie - 1) {
                                case 0:
                                    jButton24.setEnabled(gracz1.getPozycje()[23 - (posuniecie - 1)] < 2);
                                    break;
                                case 1:
                                    jButton23.setEnabled(gracz1.getPozycje()[23 - (posuniecie - 1)] < 2);
                                    break;
                                case 2:
                                    jButton22.setEnabled(gracz1.getPozycje()[23 - (posuniecie - 1)] < 2);
                                    break;
                                case 3:
                                    jButton21.setEnabled(gracz1.getPozycje()[23 - (posuniecie - 1)] < 2);
                                    break;
                                case 4:
                                    jButton20.setEnabled(gracz1.getPozycje()[23 - (posuniecie - 1)] < 2);
                                    break;
                                case 5:
                                    jButton19.setEnabled(gracz1.getPozycje()[23 - (posuniecie - 1)] < 2);
                                    break;

                            }
                            if (jButton19.isEnabled() == false && jButton20.isEnabled() == false
                                    && jButton23.isEnabled() == false && jButton24.isEnabled() == false
                                    && jButton22.isEnabled() == false && jButton21.isEnabled() == false) {
                                JOptionPane.showMessageDialog(rootPane, "Brak możliwości wyrowadzenia piona, ruch przeciwnika");

                                nowa_tura();
                            }

                        }
                    } else {
                        for (int x = 0; x < 23; x++) {
                            switch (x) {
                                case 0:
                                    jButton1.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 1:
                                    jButton2.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 2:
                                    jButton3.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 3:
                                    jButton4.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 4:
                                    jButton5.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 5:
                                    jButton6.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 6:
                                    jButton7.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 7:
                                    jButton8.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 8:
                                    jButton9.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 9:
                                    jButton10.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 10:
                                    jButton11.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 11:
                                    jButton12.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 12:
                                    jButton13.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 13:
                                    jButton14.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 14:
                                    jButton15.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 15:
                                    jButton16.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 16:
                                    jButton17.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 17:
                                    jButton18.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 18:
                                    jButton19.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 19:
                                    jButton20.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 20:
                                    jButton21.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 21:
                                    jButton22.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 22:
                                    jButton23.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                                case 23:
                                    jButton24.setEnabled((kto_ma_ruch == false && gracz2.getPozycje()[23 - x] > 0) || (kto_ma_ruch == true && gracz1.getPozycje()[x] > 0));
                                    break;
                            }
                        }
                    }
                }
                czysc();
                rysuj_plansze();
                rysuj_piony();

            }

        }
    }

    private void ustaw(int posuniecie) {
        if (kto_ma_ruch == true) {
            if (gracz1.getBanda() == 0) {
                switch (posuniecie) {
                    case 1:
                        jButton24.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton20.setEnabled(gracz1.getPozycje()[19] > 0);
                        jButton19.setEnabled(gracz1.getPozycje()[18] > 0);
                        jButton23.setEnabled(gracz1.getPozycje()[22] > 0);
                        jButton22.setEnabled(gracz1.getPozycje()[21] > 0);
                        jButton21.setEnabled(gracz1.getPozycje()[20] > 0);
                        break;
                    case 2:
                        jButton24.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton23.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton20.setEnabled(gracz1.getPozycje()[19] > 0);
                        jButton19.setEnabled(gracz1.getPozycje()[18] > 0);
                        jButton22.setEnabled(gracz1.getPozycje()[21] > 0);
                        jButton21.setEnabled(gracz1.getPozycje()[20] > 0);

                        break;
                    case 3:
                        jButton24.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton23.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton22.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton19.setEnabled(gracz1.getPozycje()[18] > 0);
                        jButton20.setEnabled(gracz1.getPozycje()[19] > 0);
                        jButton21.setEnabled(gracz1.getPozycje()[20] > 0);
                        break;
                    case 4:
                        jButton24.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton23.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton22.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton21.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton20.setEnabled(gracz1.getPozycje()[19] > 0);
                        jButton19.setEnabled(gracz1.getPozycje()[18] > 0);
                        break;
                    case 5:
                        jButton24.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton23.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton22.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton21.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton20.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton19.setEnabled(gracz1.getPozycje()[18] > 0);
                        break;
                    case 6:
                        jButton24.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton23.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton22.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton21.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton20.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        jButton19.setEnabled((gracz1.isPozwolenie_na_wyprowadzke() == true));
                        break;
                }
            }
        } else {
            if (gracz2.getBanda() == 0) {
                switch (posuniecie) {
                    case 1:
                        jButton1.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton2.setEnabled(gracz2.getPozycje()[22] > 0);
                        jButton5.setEnabled(gracz2.getPozycje()[19] > 0);
                        jButton6.setEnabled(gracz2.getPozycje()[18] > 0);
                        jButton4.setEnabled(gracz2.getPozycje()[20] > 0);
                        jButton3.setEnabled(gracz2.getPozycje()[21] > 0);
                        break;
                    case 2:
                        jButton1.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton2.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton5.setEnabled(gracz2.getPozycje()[19] > 0);
                        jButton6.setEnabled(gracz2.getPozycje()[18] > 0);
                        jButton4.setEnabled(gracz2.getPozycje()[20] > 0);
                        jButton3.setEnabled(gracz2.getPozycje()[21] > 0);
                        break;
                    case 3:
                        jButton1.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton2.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton3.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton5.setEnabled(gracz2.getPozycje()[19] > 0);
                        jButton6.setEnabled(gracz2.getPozycje()[18] > 0);
                        jButton4.setEnabled(gracz2.getPozycje()[20] > 0);
                        break;
                    case 4:
                        jButton4.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton3.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton2.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton1.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton5.setEnabled(gracz2.getPozycje()[19] > 0);
                        jButton6.setEnabled(gracz2.getPozycje()[18] > 0);
                        break;
                    case 5:
                        jButton4.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton3.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton2.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton1.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton5.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton6.setEnabled(gracz2.getPozycje()[18] > 0);
                        break;
                    case 6:
                        jButton4.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton3.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton2.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton1.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton5.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        jButton6.setEnabled((gracz2.isPozwolenie_na_wyprowadzke() == true));
                        break;
                }
            }
        }
    }
}
